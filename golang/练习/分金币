# 台阶

```go
// 递归爬楼梯 可以一次 一层 也可以 一次二层 有多少种爬法
func fun(x uint) uint {
  if x == 1 {
    return 1
  }

  if x == 2 {
    return 2
  }
  return fun(x-1) + fun(x-2)
}
```





# 分金币

```go

/*
你有50枚金币，需要分配给以下几个人：Matthew,Sarah,Augustus,Heidi,Emilie,Peter,Giana,Adriano,Aaron,Elizabeth。
分配规则如下：
a. 名字中每包含1个'e'或'E'分1枚金币
b. 名字中每包含1个'i'或'I'分2枚金币
c. 名字中每包含1个'o'或'O'分3枚金币
d: 名字中每包含1个'u'或'U'分4枚金币
写一个程序，计算每个用户分到多少金币，以及最后剩余多少金币？
程序结构如下，请实现 ‘dispatchCoin’ 函数
*/
var (
	coins = 39
	users = []string{
		"Matthew", "Sarah", "Augustus", "Heidi", "Emilie", "Peter", "Giana", "Adriano", "Aaron", "Elizabeth",
	}
	distribution = make(map[string]int, len(users))
)

func dispatchCoin() int {
	for _, name := range users {
		for _, nameValue := range name {
			if (nameValue == 'e' || nameValue == 'E') && coins > 1 {
				distribution[name]++
				coins--
			} else if (nameValue == 'i' || nameValue == 'I') && coins > 2 {
				distribution[name] += 2
				coins -= 2
			} else if (nameValue == 'o' || nameValue == 'O') && coins > 3 {
				distribution[name] += 3
				coins -= 3
			} else if (nameValue == 'u' || nameValue == 'U') && coins > 4 {
				distribution[name] += 4
				coins -= 4
			}
		}
	}
	return coins
}

func main() {
	left := dispatchCoin()
	fmt.Println("剩下：", left)
    fmt.Println(distribution)
}
```

